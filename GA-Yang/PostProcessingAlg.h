#pragma once

#include <vector>
#include <fstream>

#include "Chromosome.h"

////////////////////////////////////////////////////////////////////////
/// \brief    Post processing algorithm
///
/// Role: Represents the post processing algorithm which is executed at the end of each Run
///
/// Responsibilities: 
///         1. Common interface of all post processing algorithm
///         2. Factory of concrete algorithm creation
///         3. Access to best solution that was found by the post processing algorithm
///         4. Collects data after each Execution
///         5. Execute the algorithm after each Run
///         6. Knows how to print the results generated by the algorithm
///         
////////////////////////////////////////////////////////////////////////
class CPostProcessingAlg
{
public:

    /// \brief    Access to Singleton object
    static CPostProcessingAlg* CreateConcrete();

    virtual ~CPostProcessingAlg() {}

    virtual void Update(const std::vector<CChromosome>& iElitism) = 0;
    bool Execute(const CGenotypeData& ioGenotypeData, int iOrder);
    virtual void UpdateGenotypeData(CGenotypeData& ioGenotypeData) = 0;
    virtual void Print(const CGenotypeData& ioGenotypeData, const std::string& iBaseFileName, int iOrder) const = 0;

protected:
    
    uint64_t mNumberOfFitnessCalcualtions;

    CPostProcessingAlg() : mNumberOfFitnessCalcualtions(0) {}

    virtual bool DerivedExecute(const CGenotypeData& ioGenotypeData, int iOrder) = 0;
};

inline bool CPostProcessingAlg::Execute(const CGenotypeData& ioGenotypeData, int iOrder)
{
    mNumberOfFitnessCalcualtions += CChromosome::FitnessCalculationCounter();
    return DerivedExecute(ioGenotypeData, iOrder);
}
